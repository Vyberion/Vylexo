"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cooldown = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const cooldownPath = path_1.default.resolve(__dirname, 'cooldown.json');
if (!fs_1.default.existsSync(cooldownPath)) {
    fs_1.default.writeFileSync(cooldownPath, JSON.stringify({}));
}
const cooldowns = JSON.parse(fs_1.default.readFileSync(cooldownPath, 'utf8'));
class Cooldown {
    constructor() {
        this.Command = Command;
        return this;
    }
}
exports.Cooldown = Cooldown;
class Command {
    constructor(guildId, commandName) {
        if (!guildId || typeof guildId !== 'string')
            throw new Error('Guild ID must be a string');
        if (!commandName || typeof commandName !== 'string')
            throw new Error('Command name must be a string');
        this.guildId = guildId;
        this.commandName = commandName;
        cooldowns[guildId] = cooldowns[guildId] || {};
        cooldowns[guildId][commandName] = cooldowns[guildId][commandName] || {};
        saveCooldowns();
        return this;
    }
    add(userId, time) {
        if (!userId || typeof userId !== 'string')
            throw new Error('User ID must be a string');
        if (!time || typeof time !== 'number')
            throw new Error('Cooldown must be a number');
        if (!cooldowns[this.guildId] ||
            !cooldowns[this.guildId][this.commandName])
            return;
        const now = new Date();
        cooldowns[this.guildId][this.commandName][userId] = {
            start: now,
            time,
        };
        saveCooldowns();
    }
    remove(userId) {
        if (!userId || typeof userId !== 'string')
            throw new Error('User ID must be a string');
        if (!cooldowns[this.guildId] ||
            !cooldowns[this.guildId][this.commandName][userId])
            return;
        delete cooldowns[this.guildId][this.commandName][userId];
        saveCooldowns();
    }
    has(userId) {
        if (!userId || typeof userId !== 'string')
            throw new Error('User ID must be a string');
        if (!cooldowns[this.guildId] ||
            !cooldowns[this.guildId][this.commandName] ||
            !cooldowns[this.guildId][this.commandName][userId])
            return false;
        const now = new Date();
        const { start, time } = cooldowns[this.guildId][this.commandName][userId];
        const diff = now.getTime() - new Date(start).getTime();
        if (diff > time)
            return false;
        const msleft = time - diff;
        const secondsleft = Math.floor((msleft / 1000) % 60);
        const minutesleft = Math.floor((msleft / 1000 / 60) % 60);
        const hoursleft = Math.floor((msleft / 1000 / 60 / 60) % 24);
        const daysleft = Math.floor(msleft / 1000 / 60 / 60 / 24);
        const cooldownObj = {
            msleft,
            secondsleft,
            minutesleft,
            hoursleft,
            daysleft,
        };
        return cooldownObj;
    }
}
function saveCooldowns() {
    fs_1.default.writeFileSync(cooldownPath, JSON.stringify(cooldowns));
}
